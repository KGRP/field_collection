<?php

/**
 * @file
 * Module implementing field collection field type.
 */

use Drupal\field_collection\Entity\FieldCollection;
use Drupal\Core\Extension\ModuleHandler;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * Implements hook_help().
 */
function field_collection_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.field_collection':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The field collection module provides a field, to which any number of fields can be attached. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => \Drupal::url('help.page', array('name' => 'field')))) . '</p>';
      return $output;
  }
}

/**
 * Loads a field collection item.
 *
 * @return field_collection_item
 *   The field collection item entity or FALSE.
 */
function field_collection_item_load($item_id, $reset = FALSE) {
  $result = field_collection_item_load_multiple(array($item_id), $reset);
  return $result ? reset($result) : FALSE;
}

/**
 * Loads field collection items.
 *
 * @return
 *   An array of field collection item entities.
 */
function field_collection_item_load_multiple($ids = array(), $reset = FALSE) {
  return entity_load_multiple('field_collection_item', $ids, $reset);
}

/**
 * Loads a field collection revision.
 *
 * @param $revision_id
 *   The field collection revision ID.
 */
function field_collection_item_revision_load($revision_id) {
  return entity_revision_load('field_collection_item', $revision_id);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Create a field collection bundle when a new field collection field is made.
 */
function field_collection_field_storage_config_insert(EntityInterface $field) {
  if ($field->type == 'field_collection') {
    $field_collection = new FieldCollection();
    $field_collection->set('label', $field->field_name);
    $field_collection->set('id', $field->field_name);
    $field_collection->enforceIsNew();
    $field_collection->save();

    // TODO: entity_invoke_bundle_hook in post save like in nodeType ?

    // Clear caches.
    //entity_info_cache_clear();

    // Do not directly issue menu rebuilds here to avoid potentially multiple
    // rebuilds. Instead, let menu_get_item() issue the rebuild on the next
    // request.
    //
    // TODO: Figure out whether this is still needed and replace it with the
    // new API if it is.
    // https://drupal.org/node/2183531
    //
    // variable_set('menu_rebuild_needed', TRUE);
  }
}

/**
 * Implements hood_form_FORM_ID_alter() for field_ui_field_edit_form.
 *
 * Remove default value from field collection field settings.
 */
function field_collection_form_field_ui_field_edit_form_alter(
  &$form, FormStateInterface $form_state)
{
  if ($form['#field']->getType() == 'field_collection') {
    unset($form['field']['default_value']['widget']);
    $form['field']['default_value']['#description'] = t(
      'To specify a default value, configure it via the regular default ' .
      'value setting of each field that is part of the field collection. To ' .
      'do so, go to the <a href="!url">Manage fields</a> screen of the field ' .
      'collection.',
      array('!url' => _url('admin/structure/field-collections/manage/' .
                           $form['#field']->getName() . '/fields')));
  }
}

/**
 * Sort function for items order.
 *
 * Copied from D7 '_field_sort_items_helper'.
 *
 * TODO: Replace this and references to it with whatever that function was
 * replaced with in Drupal 8.
 */
function _field_collection_sort_items_helper($a, $b) {
  $a_weight = (is_array($a) ? $a['_weight'] : 0);
  $b_weight = (is_array($b) ? $b['_weight'] : 0);

  return $a_weight - $b_weight;
}

/**
 * Returns whether or not the FieldItemList is full.
 *
 * TODO: Find the standard way to do this and replace calls to it.
 */
function _field_collection_field_item_list_full(
  FieldItemListInterface $field_list)
{
  $cardinality = $field_list->getFieldDefinition()
    ->getFieldStorageDefinition()
    ->cardinality;

  $total = $field_list->count();

  return ($cardinality <= $total);
}
