<?php

/**
 * @file
 * Module implementing field collection field type.
 */

use Drupal\field_collection\Entity\FieldCollection;
use Drupal\Core\Extension\ModuleHandler;
use Drupal\Core\Entity\EntityInterface;

/**
 * Loads a field collection item.
 *
 * @return field_collection_item
 *   The field collection item entity or FALSE.
 */
function field_collection_item_load($item_id, $reset = FALSE) {
  $result = field_collection_item_load_multiple(array($item_id), $reset);
  return $result ? reset($result) : FALSE;
}

/**
 * Loads field collection items.
 *
 * @return
 *   An array of field collection item entities.
 */
function field_collection_item_load_multiple($ids = array(), $reset = FALSE) {
  return entity_load_multiple('field_collection_item', $ids, $reset);
}

/**
 * Loads a field collection revision.
 *
 * @param $revision_id
 *   The field collection revision ID.
 */
function field_collection_item_revision_load($revision_id) {
  return entity_revision_load('field_collection_item', $revision_id);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Create a field collection bundle when a new field collection field is made.
 */
function field_collection_field_storage_config_insert(EntityInterface $field) {
  if ($field->type == 'field_collection') {
    $field_collection = new FieldCollection();
    $field_collection->label = $field->field_name;
    $field_collection->id = $field->field_name;
    $field_collection->save();

    // TODO: entity_invoke_bundle_hook in post save like in nodeType ?

    // Clear caches.
    //entity_info_cache_clear();

    // Do not directly issue menu rebuilds here to avoid potentially multiple
    // rebuilds. Instead, let menu_get_item() issue the rebuild on the next
    // request.
    //
    // TODO: Figure out whether this is still needed and replace it with the
    // new API if it is.
    // https://drupal.org/node/2183531
    //
    // variable_set('menu_rebuild_needed', TRUE);
  }
}

